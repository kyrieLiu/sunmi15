package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.pad.model.AnimalTypeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANIMAL_TYPE_INFO".
*/
public class AnimalTypeInfoDao extends AbstractDao<AnimalTypeInfo, Long> {

    public static final String TABLENAME = "ANIMAL_TYPE_INFO";

    /**
     * Properties of entity AnimalTypeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Id = new Property(1, long.class, "id", true, "_id");
        public final static Property RequestTime = new Property(2, long.class, "requestTime", false, "REQUEST_TIME");
    }

    private DaoSession daoSession;


    public AnimalTypeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AnimalTypeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANIMAL_TYPE_INFO\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: id
                "\"REQUEST_TIME\" INTEGER NOT NULL );"); // 2: requestTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANIMAL_TYPE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnimalTypeInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getRequestTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnimalTypeInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getRequestTime());
    }

    @Override
    protected final void attachEntity(AnimalTypeInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public AnimalTypeInfo readEntity(Cursor cursor, int offset) {
        AnimalTypeInfo entity = new AnimalTypeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getLong(offset + 1), // id
            cursor.getLong(offset + 2) // requestTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnimalTypeInfo entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setRequestTime(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnimalTypeInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnimalTypeInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnimalTypeInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
