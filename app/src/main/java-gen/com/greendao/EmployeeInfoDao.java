package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.pad.model.EmployeeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYEE_INFO".
*/
public class EmployeeInfoDao extends AbstractDao<EmployeeInfo, Long> {

    public static final String TABLENAME = "EMPLOYEE_INFO";

    /**
     * Properties of entity EmployeeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BranchId = new Property(0, int.class, "branchId", false, "BRANCH_ID");
        public final static Property CreateTime = new Property(1, long.class, "createTime", false, "CREATE_TIME");
        public final static Property EmergencyContact = new Property(2, String.class, "emergencyContact", false, "EMERGENCY_CONTACT");
        public final static Property EmergencyContactPhone = new Property(3, String.class, "emergencyContactPhone", false, "EMERGENCY_CONTACT_PHONE");
        public final static Property HeadOfficeId = new Property(4, int.class, "headOfficeId", false, "HEAD_OFFICE_ID");
        public final static Property Id = new Property(5, long.class, "id", true, "_id");
        public final static Property JobNumber = new Property(6, String.class, "jobNumber", false, "JOB_NUMBER");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Position = new Property(10, String.class, "position", false, "POSITION");
        public final static Property Post = new Property(11, String.class, "post", false, "POST");
        public final static Property Qq = new Property(12, String.class, "qq", false, "QQ");
        public final static Property Sex = new Property(13, int.class, "sex", false, "SEX");
        public final static Property ShopId = new Property(14, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(15, String.class, "shopName", false, "SHOP_NAME");
        public final static Property Status = new Property(16, int.class, "status", false, "STATUS");
        public final static Property Type = new Property(17, int.class, "type", false, "TYPE");
        public final static Property UserType = new Property(18, int.class, "userType", false, "USER_TYPE");
        public final static Property RequestTime = new Property(19, long.class, "requestTime", false, "REQUEST_TIME");
        public final static Property Select = new Property(20, int.class, "select", false, "SELECT");
    }


    public EmployeeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEE_INFO\" (" + //
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 0: branchId
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 1: createTime
                "\"EMERGENCY_CONTACT\" TEXT," + // 2: emergencyContact
                "\"EMERGENCY_CONTACT_PHONE\" TEXT," + // 3: emergencyContactPhone
                "\"HEAD_OFFICE_ID\" INTEGER NOT NULL ," + // 4: headOfficeId
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 5: id
                "\"JOB_NUMBER\" TEXT," + // 6: jobNumber
                "\"NAME\" TEXT," + // 7: name
                "\"PASSWORD\" TEXT," + // 8: password
                "\"PHONE\" TEXT," + // 9: phone
                "\"POSITION\" TEXT," + // 10: position
                "\"POST\" TEXT," + // 11: post
                "\"QQ\" TEXT," + // 12: qq
                "\"SEX\" INTEGER NOT NULL ," + // 13: sex
                "\"SHOP_ID\" TEXT," + // 14: shopId
                "\"SHOP_NAME\" TEXT," + // 15: shopName
                "\"STATUS\" INTEGER NOT NULL ," + // 16: status
                "\"TYPE\" INTEGER NOT NULL ," + // 17: type
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 18: userType
                "\"REQUEST_TIME\" INTEGER NOT NULL ," + // 19: requestTime
                "\"SELECT\" INTEGER NOT NULL );"); // 20: select
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmployeeInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBranchId());
        stmt.bindLong(2, entity.getCreateTime());
 
        String emergencyContact = entity.getEmergencyContact();
        if (emergencyContact != null) {
            stmt.bindString(3, emergencyContact);
        }
 
        String emergencyContactPhone = entity.getEmergencyContactPhone();
        if (emergencyContactPhone != null) {
            stmt.bindString(4, emergencyContactPhone);
        }
        stmt.bindLong(5, entity.getHeadOfficeId());
        stmt.bindLong(6, entity.getId());
 
        String jobNumber = entity.getJobNumber();
        if (jobNumber != null) {
            stmt.bindString(7, jobNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(11, position);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(12, post);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(13, qq);
        }
        stmt.bindLong(14, entity.getSex());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(15, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(16, shopName);
        }
        stmt.bindLong(17, entity.getStatus());
        stmt.bindLong(18, entity.getType());
        stmt.bindLong(19, entity.getUserType());
        stmt.bindLong(20, entity.getRequestTime());
        stmt.bindLong(21, entity.getSelect());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmployeeInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBranchId());
        stmt.bindLong(2, entity.getCreateTime());
 
        String emergencyContact = entity.getEmergencyContact();
        if (emergencyContact != null) {
            stmt.bindString(3, emergencyContact);
        }
 
        String emergencyContactPhone = entity.getEmergencyContactPhone();
        if (emergencyContactPhone != null) {
            stmt.bindString(4, emergencyContactPhone);
        }
        stmt.bindLong(5, entity.getHeadOfficeId());
        stmt.bindLong(6, entity.getId());
 
        String jobNumber = entity.getJobNumber();
        if (jobNumber != null) {
            stmt.bindString(7, jobNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(11, position);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(12, post);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(13, qq);
        }
        stmt.bindLong(14, entity.getSex());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(15, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(16, shopName);
        }
        stmt.bindLong(17, entity.getStatus());
        stmt.bindLong(18, entity.getType());
        stmt.bindLong(19, entity.getUserType());
        stmt.bindLong(20, entity.getRequestTime());
        stmt.bindLong(21, entity.getSelect());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 5);
    }    

    @Override
    public EmployeeInfo readEntity(Cursor cursor, int offset) {
        EmployeeInfo entity = new EmployeeInfo( //
            cursor.getInt(offset + 0), // branchId
            cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emergencyContact
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emergencyContactPhone
            cursor.getInt(offset + 4), // headOfficeId
            cursor.getLong(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jobNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // position
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // post
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // qq
            cursor.getInt(offset + 13), // sex
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // shopId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // shopName
            cursor.getInt(offset + 16), // status
            cursor.getInt(offset + 17), // type
            cursor.getInt(offset + 18), // userType
            cursor.getLong(offset + 19), // requestTime
            cursor.getInt(offset + 20) // select
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmployeeInfo entity, int offset) {
        entity.setBranchId(cursor.getInt(offset + 0));
        entity.setCreateTime(cursor.getLong(offset + 1));
        entity.setEmergencyContact(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmergencyContactPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadOfficeId(cursor.getInt(offset + 4));
        entity.setId(cursor.getLong(offset + 5));
        entity.setJobNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPosition(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPost(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQq(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSex(cursor.getInt(offset + 13));
        entity.setShopId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setShopName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.getInt(offset + 16));
        entity.setType(cursor.getInt(offset + 17));
        entity.setUserType(cursor.getInt(offset + 18));
        entity.setRequestTime(cursor.getLong(offset + 19));
        entity.setSelect(cursor.getInt(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmployeeInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmployeeInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmployeeInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
