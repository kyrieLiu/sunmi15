package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.pad.model.LoginInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_INFO".
*/
public class LoginInfoDao extends AbstractDao<LoginInfo, Long> {

    public static final String TABLENAME = "LOGIN_INFO";

    /**
     * Properties of entity LoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Province = new Property(0, String.class, "province", false, "PROVINCE");
        public final static Property ProvinceName = new Property(1, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property CityName = new Property(3, String.class, "cityName", false, "CITY_NAME");
        public final static Property Area = new Property(4, String.class, "area", false, "AREA");
        public final static Property EquipmentId = new Property(5, String.class, "equipmentId", false, "EQUIPMENT_ID");
        public final static Property ShopId = new Property(6, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(7, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopShortName = new Property(8, String.class, "shopShortName", false, "SHOP_SHORT_NAME");
        public final static Property AreaName = new Property(9, String.class, "areaName", false, "AREA_NAME");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Password = new Property(11, String.class, "password", false, "PASSWORD");
        public final static Property BranchId = new Property(12, int.class, "branchId", false, "BRANCH_ID");
        public final static Property HeadOfficeId = new Property(13, int.class, "headOfficeId", false, "HEAD_OFFICE_ID");
        public final static Property Address = new Property(14, String.class, "address", false, "ADDRESS");
        public final static Property MchNo = new Property(15, String.class, "mchNo", false, "MCH_NO");
        public final static Property Md5Key = new Property(16, String.class, "md5Key", false, "MD5_KEY");
        public final static Property StoreId = new Property(17, String.class, "storeId", false, "STORE_ID");
        public final static Property IsModular = new Property(18, int.class, "isModular", false, "IS_MODULAR");
        public final static Property Id = new Property(19, Long.class, "id", true, "_id");
    }


    public LoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_INFO\" (" + //
                "\"PROVINCE\" TEXT," + // 0: province
                "\"PROVINCE_NAME\" TEXT," + // 1: provinceName
                "\"CITY\" TEXT," + // 2: city
                "\"CITY_NAME\" TEXT," + // 3: cityName
                "\"AREA\" TEXT," + // 4: area
                "\"EQUIPMENT_ID\" TEXT," + // 5: equipmentId
                "\"SHOP_ID\" TEXT," + // 6: shopId
                "\"SHOP_NAME\" TEXT," + // 7: shopName
                "\"SHOP_SHORT_NAME\" TEXT," + // 8: shopShortName
                "\"AREA_NAME\" TEXT," + // 9: areaName
                "\"PHONE\" TEXT," + // 10: phone
                "\"PASSWORD\" TEXT," + // 11: password
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 12: branchId
                "\"HEAD_OFFICE_ID\" INTEGER NOT NULL ," + // 13: headOfficeId
                "\"ADDRESS\" TEXT," + // 14: address
                "\"MCH_NO\" TEXT," + // 15: mchNo
                "\"MD5_KEY\" TEXT," + // 16: md5Key
                "\"STORE_ID\" TEXT," + // 17: storeId
                "\"IS_MODULAR\" INTEGER NOT NULL ," + // 18: isModular
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 19: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(1, province);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(2, provinceName);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(4, cityName);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(6, equipmentId);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(7, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(8, shopName);
        }
 
        String shopShortName = entity.getShopShortName();
        if (shopShortName != null) {
            stmt.bindString(9, shopShortName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(10, areaName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
        stmt.bindLong(13, entity.getBranchId());
        stmt.bindLong(14, entity.getHeadOfficeId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(15, address);
        }
 
        String mchNo = entity.getMchNo();
        if (mchNo != null) {
            stmt.bindString(16, mchNo);
        }
 
        String md5Key = entity.getMd5Key();
        if (md5Key != null) {
            stmt.bindString(17, md5Key);
        }
 
        String storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindString(18, storeId);
        }
        stmt.bindLong(19, entity.getIsModular());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(20, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(1, province);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(2, provinceName);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(4, cityName);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(6, equipmentId);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(7, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(8, shopName);
        }
 
        String shopShortName = entity.getShopShortName();
        if (shopShortName != null) {
            stmt.bindString(9, shopShortName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(10, areaName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
        stmt.bindLong(13, entity.getBranchId());
        stmt.bindLong(14, entity.getHeadOfficeId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(15, address);
        }
 
        String mchNo = entity.getMchNo();
        if (mchNo != null) {
            stmt.bindString(16, mchNo);
        }
 
        String md5Key = entity.getMd5Key();
        if (md5Key != null) {
            stmt.bindString(17, md5Key);
        }
 
        String storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindString(18, storeId);
        }
        stmt.bindLong(19, entity.getIsModular());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(20, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19);
    }    

    @Override
    public LoginInfo readEntity(Cursor cursor, int offset) {
        LoginInfo entity = new LoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // province
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // provinceName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cityName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // area
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // equipmentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shopId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shopName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shopShortName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // areaName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // password
            cursor.getInt(offset + 12), // branchId
            cursor.getInt(offset + 13), // headOfficeId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // address
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mchNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // md5Key
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // storeId
            cursor.getInt(offset + 18), // isModular
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginInfo entity, int offset) {
        entity.setProvince(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProvinceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArea(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEquipmentId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShopId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShopName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShopShortName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAreaName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPassword(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBranchId(cursor.getInt(offset + 12));
        entity.setHeadOfficeId(cursor.getInt(offset + 13));
        entity.setAddress(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMchNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMd5Key(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStoreId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsModular(cursor.getInt(offset + 18));
        entity.setId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
