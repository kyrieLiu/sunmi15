package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.pad.model.BackGoodsReasonInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BACK_GOODS_REASON_INFO".
*/
public class BackGoodsReasonInfoDao extends AbstractDao<BackGoodsReasonInfo, Long> {

    public static final String TABLENAME = "BACK_GOODS_REASON_INFO";

    /**
     * Properties of entity BackGoodsReasonInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ShopId = new Property(0, String.class, "shopId", false, "SHOP_ID");
        public final static Property Reasons = new Property(1, String.class, "reasons", false, "REASONS");
        public final static Property Id = new Property(2, Long.class, "id", true, "_id");
        public final static Property RequestTime = new Property(3, long.class, "requestTime", false, "REQUEST_TIME");
    }


    public BackGoodsReasonInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BackGoodsReasonInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BACK_GOODS_REASON_INFO\" (" + //
                "\"SHOP_ID\" TEXT," + // 0: shopId
                "\"REASONS\" TEXT," + // 1: reasons
                "\"_id\" INTEGER PRIMARY KEY ," + // 2: id
                "\"REQUEST_TIME\" INTEGER NOT NULL );"); // 3: requestTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BACK_GOODS_REASON_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BackGoodsReasonInfo entity) {
        stmt.clearBindings();
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(1, shopId);
        }
 
        String reasons = entity.getReasons();
        if (reasons != null) {
            stmt.bindString(2, reasons);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
        stmt.bindLong(4, entity.getRequestTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BackGoodsReasonInfo entity) {
        stmt.clearBindings();
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(1, shopId);
        }
 
        String reasons = entity.getReasons();
        if (reasons != null) {
            stmt.bindString(2, reasons);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
        stmt.bindLong(4, entity.getRequestTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    @Override
    public BackGoodsReasonInfo readEntity(Cursor cursor, int offset) {
        BackGoodsReasonInfo entity = new BackGoodsReasonInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // shopId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reasons
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
            cursor.getLong(offset + 3) // requestTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BackGoodsReasonInfo entity, int offset) {
        entity.setShopId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReasons(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRequestTime(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BackGoodsReasonInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BackGoodsReasonInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BackGoodsReasonInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
