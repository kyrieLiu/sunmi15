package com.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import ys.app.pad.model.AnimalTypeClassifyInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANIMAL_TYPE_CLASSIFY_INFO".
*/
public class AnimalTypeClassifyInfoDao extends AbstractDao<AnimalTypeClassifyInfo, Long> {

    public static final String TABLENAME = "ANIMAL_TYPE_CLASSIFY_INFO";

    /**
     * Properties of entity AnimalTypeClassifyInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Id = new Property(1, long.class, "id", true, "_id");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property AnimalTypeId = new Property(3, long.class, "animalTypeId", false, "ANIMAL_TYPE_ID");
        public final static Property RequestTime = new Property(4, long.class, "requestTime", false, "REQUEST_TIME");
        public final static Property SortLetters = new Property(5, String.class, "sortLetters", false, "SORT_LETTERS");
    }

    private Query<AnimalTypeClassifyInfo> animalTypeInfo_VarietiesListQuery;

    public AnimalTypeClassifyInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AnimalTypeClassifyInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANIMAL_TYPE_CLASSIFY_INFO\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: id
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"ANIMAL_TYPE_ID\" INTEGER NOT NULL ," + // 3: animalTypeId
                "\"REQUEST_TIME\" INTEGER NOT NULL ," + // 4: requestTime
                "\"SORT_LETTERS\" TEXT);"); // 5: sortLetters
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANIMAL_TYPE_CLASSIFY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnimalTypeClassifyInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getAnimalTypeId());
        stmt.bindLong(5, entity.getRequestTime());
 
        String sortLetters = entity.getSortLetters();
        if (sortLetters != null) {
            stmt.bindString(6, sortLetters);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnimalTypeClassifyInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getAnimalTypeId());
        stmt.bindLong(5, entity.getRequestTime());
 
        String sortLetters = entity.getSortLetters();
        if (sortLetters != null) {
            stmt.bindString(6, sortLetters);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public AnimalTypeClassifyInfo readEntity(Cursor cursor, int offset) {
        AnimalTypeClassifyInfo entity = new AnimalTypeClassifyInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getLong(offset + 1), // id
            cursor.getInt(offset + 2), // type
            cursor.getLong(offset + 3), // animalTypeId
            cursor.getLong(offset + 4), // requestTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sortLetters
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnimalTypeClassifyInfo entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setAnimalTypeId(cursor.getLong(offset + 3));
        entity.setRequestTime(cursor.getLong(offset + 4));
        entity.setSortLetters(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnimalTypeClassifyInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnimalTypeClassifyInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnimalTypeClassifyInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "varietiesList" to-many relationship of AnimalTypeInfo. */
    public List<AnimalTypeClassifyInfo> _queryAnimalTypeInfo_VarietiesList(long animalTypeId) {
        synchronized (this) {
            if (animalTypeInfo_VarietiesListQuery == null) {
                QueryBuilder<AnimalTypeClassifyInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AnimalTypeId.eq(null));
                animalTypeInfo_VarietiesListQuery = queryBuilder.build();
            }
        }
        Query<AnimalTypeClassifyInfo> query = animalTypeInfo_VarietiesListQuery.forCurrentThread();
        query.setParameter(0, animalTypeId);
        return query.list();
    }

}
