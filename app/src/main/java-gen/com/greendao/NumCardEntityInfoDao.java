package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.pad.itemmodel.NumCardEntityInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NUM_CARD_ENTITY_INFO".
*/
public class NumCardEntityInfoDao extends AbstractDao<NumCardEntityInfo, Long> {

    public static final String TABLENAME = "NUM_CARD_ENTITY_INFO";

    /**
     * Properties of entity NumCardEntityInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property Num = new Property(2, int.class, "num", false, "NUM");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property RealAmt = new Property(4, double.class, "realAmt", false, "REAL_AMT");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property TypeName = new Property(6, String.class, "typeName", false, "TYPE_NAME");
    }


    public NumCardEntityInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NumCardEntityInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NUM_CARD_ENTITY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"NUM\" INTEGER NOT NULL ," + // 2: num
                "\"NAME\" TEXT," + // 3: name
                "\"REAL_AMT\" REAL NOT NULL ," + // 4: realAmt
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"TYPE_NAME\" TEXT);"); // 6: typeName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NUM_CARD_ENTITY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NumCardEntityInfo entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getNum());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getRealAmt());
        stmt.bindLong(6, entity.getType());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(7, typeName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NumCardEntityInfo entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getNum());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getRealAmt());
        stmt.bindLong(6, entity.getType());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(7, typeName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NumCardEntityInfo readEntity(Cursor cursor, int offset) {
        NumCardEntityInfo entity = new NumCardEntityInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.getLong(offset + 1), // id
            cursor.getInt(offset + 2), // num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getDouble(offset + 4), // realAmt
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // typeName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NumCardEntityInfo entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setNum(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealAmt(cursor.getDouble(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setTypeName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NumCardEntityInfo entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NumCardEntityInfo entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NumCardEntityInfo entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
