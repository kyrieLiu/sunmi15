package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.pad.model.NumCardListInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NUM_CARD_LIST_INFO".
*/
public class NumCardListInfoDao extends AbstractDao<NumCardListInfo, Long> {

    public static final String TABLENAME = "NUM_CARD_LIST_INFO";

    /**
     * Properties of entity NumCardListInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BranchId = new Property(0, int.class, "branchId", false, "BRANCH_ID");
        public final static Property Classification = new Property(1, int.class, "classification", false, "CLASSIFICATION");
        public final static Property CommodityList = new Property(2, String.class, "commodityList", false, "COMMODITY_LIST");
        public final static Property CommodityNum = new Property(3, String.class, "commodityNum", false, "COMMODITY_NUM");
        public final static Property ExpiryDate = new Property(4, int.class, "expiryDate", false, "EXPIRY_DATE");
        public final static Property HeadOfficeId = new Property(5, int.class, "headOfficeId", false, "HEAD_OFFICE_ID");
        public final static Property Id = new Property(6, long.class, "id", true, "_id");
        public final static Property Info = new Property(7, String.class, "info", false, "INFO");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property ProductList = new Property(9, String.class, "productList", false, "PRODUCT_LIST");
        public final static Property ProductNum = new Property(10, String.class, "productNum", false, "PRODUCT_NUM");
        public final static Property RealAmt = new Property(11, double.class, "realAmt", false, "REAL_AMT");
        public final static Property ShopId = new Property(12, String.class, "shopId", false, "SHOP_ID");
        public final static Property State = new Property(13, int.class, "state", false, "STATE");
        public final static Property Uuid = new Property(14, String.class, "uuid", false, "UUID");
        public final static Property RequestTime = new Property(15, long.class, "requestTime", false, "REQUEST_TIME");
        public final static Property Expand = new Property(16, boolean.class, "expand", false, "EXPAND");
        public final static Property IsClick = new Property(17, int.class, "isClick", false, "IS_CLICK");
    }

    private DaoSession daoSession;


    public NumCardListInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NumCardListInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NUM_CARD_LIST_INFO\" (" + //
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 0: branchId
                "\"CLASSIFICATION\" INTEGER NOT NULL ," + // 1: classification
                "\"COMMODITY_LIST\" TEXT," + // 2: commodityList
                "\"COMMODITY_NUM\" TEXT," + // 3: commodityNum
                "\"EXPIRY_DATE\" INTEGER NOT NULL ," + // 4: expiryDate
                "\"HEAD_OFFICE_ID\" INTEGER NOT NULL ," + // 5: headOfficeId
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 6: id
                "\"INFO\" TEXT," + // 7: info
                "\"NAME\" TEXT," + // 8: name
                "\"PRODUCT_LIST\" TEXT," + // 9: productList
                "\"PRODUCT_NUM\" TEXT," + // 10: productNum
                "\"REAL_AMT\" REAL NOT NULL ," + // 11: realAmt
                "\"SHOP_ID\" TEXT," + // 12: shopId
                "\"STATE\" INTEGER NOT NULL ," + // 13: state
                "\"UUID\" TEXT," + // 14: uuid
                "\"REQUEST_TIME\" INTEGER NOT NULL ," + // 15: requestTime
                "\"EXPAND\" INTEGER NOT NULL ," + // 16: expand
                "\"IS_CLICK\" INTEGER NOT NULL );"); // 17: isClick
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NUM_CARD_LIST_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NumCardListInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBranchId());
        stmt.bindLong(2, entity.getClassification());
 
        String commodityList = entity.getCommodityList();
        if (commodityList != null) {
            stmt.bindString(3, commodityList);
        }
 
        String commodityNum = entity.getCommodityNum();
        if (commodityNum != null) {
            stmt.bindString(4, commodityNum);
        }
        stmt.bindLong(5, entity.getExpiryDate());
        stmt.bindLong(6, entity.getHeadOfficeId());
        stmt.bindLong(7, entity.getId());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String productList = entity.getProductList();
        if (productList != null) {
            stmt.bindString(10, productList);
        }
 
        String productNum = entity.getProductNum();
        if (productNum != null) {
            stmt.bindString(11, productNum);
        }
        stmt.bindDouble(12, entity.getRealAmt());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(13, shopId);
        }
        stmt.bindLong(14, entity.getState());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(15, uuid);
        }
        stmt.bindLong(16, entity.getRequestTime());
        stmt.bindLong(17, entity.getExpand() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsClick());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NumCardListInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBranchId());
        stmt.bindLong(2, entity.getClassification());
 
        String commodityList = entity.getCommodityList();
        if (commodityList != null) {
            stmt.bindString(3, commodityList);
        }
 
        String commodityNum = entity.getCommodityNum();
        if (commodityNum != null) {
            stmt.bindString(4, commodityNum);
        }
        stmt.bindLong(5, entity.getExpiryDate());
        stmt.bindLong(6, entity.getHeadOfficeId());
        stmt.bindLong(7, entity.getId());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String productList = entity.getProductList();
        if (productList != null) {
            stmt.bindString(10, productList);
        }
 
        String productNum = entity.getProductNum();
        if (productNum != null) {
            stmt.bindString(11, productNum);
        }
        stmt.bindDouble(12, entity.getRealAmt());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(13, shopId);
        }
        stmt.bindLong(14, entity.getState());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(15, uuid);
        }
        stmt.bindLong(16, entity.getRequestTime());
        stmt.bindLong(17, entity.getExpand() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsClick());
    }

    @Override
    protected final void attachEntity(NumCardListInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 6);
    }    

    @Override
    public NumCardListInfo readEntity(Cursor cursor, int offset) {
        NumCardListInfo entity = new NumCardListInfo( //
            cursor.getInt(offset + 0), // branchId
            cursor.getInt(offset + 1), // classification
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commodityList
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commodityNum
            cursor.getInt(offset + 4), // expiryDate
            cursor.getInt(offset + 5), // headOfficeId
            cursor.getLong(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // info
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // productList
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // productNum
            cursor.getDouble(offset + 11), // realAmt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shopId
            cursor.getInt(offset + 13), // state
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // uuid
            cursor.getLong(offset + 15), // requestTime
            cursor.getShort(offset + 16) != 0, // expand
            cursor.getInt(offset + 17) // isClick
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NumCardListInfo entity, int offset) {
        entity.setBranchId(cursor.getInt(offset + 0));
        entity.setClassification(cursor.getInt(offset + 1));
        entity.setCommodityList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommodityNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpiryDate(cursor.getInt(offset + 4));
        entity.setHeadOfficeId(cursor.getInt(offset + 5));
        entity.setId(cursor.getLong(offset + 6));
        entity.setInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProductList(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProductNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRealAmt(cursor.getDouble(offset + 11));
        entity.setShopId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setState(cursor.getInt(offset + 13));
        entity.setUuid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRequestTime(cursor.getLong(offset + 15));
        entity.setExpand(cursor.getShort(offset + 16) != 0);
        entity.setIsClick(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NumCardListInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NumCardListInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NumCardListInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
